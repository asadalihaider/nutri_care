generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  isVerified    Boolean        @default(false)
  otp           OTP?
  profile       UserProfile?
  questionnaire Questionnaire?
  rememberMe    Boolean?       @map("remember_me")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ChatFollowup  ChatFollowup[]
  Notification  Notification[]
  ChatSession   ChatSession[]
}

model OTP {
  id        String   @id @default(uuid())
  code      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  expiresAt DateTime
}

model UserProfile {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  name         String   @default("user123")
  image        String   @default("placeholder.png")
  age          Int?
  gender       String?
  height       Float?
  weight       Float?
  targetWeight Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Questionnaire {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  medicalBackground Json
  lifestyleHabits   Json
  dietPreferences   Json
  physicalActivity  Json
  healthGoals       Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatFollowup {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String // original user message (symptom)
  dateFor   DateTime // when to notify (next day)
  notified  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ChatSession {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  title     String
  createdAt DateTime      @default(now())
  messages  ChatMessage[]
}

model ChatMessage {
  id        String      @id @default(uuid())
  session   ChatSession @relation(fields: [sessionId], references: [id])
  sessionId String
  sender    String // 'user' or 'assistant'
  content   String
  createdAt DateTime    @default(now())
}
